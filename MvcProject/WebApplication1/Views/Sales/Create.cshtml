@model WebApplication1.Models.Sale

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h3>Sale</h3>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProductId, "ProductId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProductId", null, htmlAttributes: new { @class = "form-control", @onChange = "changeProduct(this)" })
                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Stock Quantity</label>
            <div class="col-md-8">
                <input type="text" id="qty" class="form-control" readonly />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, "CustomerId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoreId, "StoreId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StoreId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StoreId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sale_date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sale_date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sale_date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Sale Price</label>
            <div class="col-md-8">
                <input type="text" id="salePrice" class="form-control" readonly />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.rate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rate, new { htmlAttributes = new { @class = "form-control", @id = "price", onchange = "getTotal()" } })
                @Html.ValidationMessageFor(model => model.rate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control", @id = "qty", onchange = "getTotal()" } })
                @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.total_price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.total_price, new { htmlAttributes = new { @class = "form-control", @id = "total", onchange = "getTotal()" } })
                @Html.ValidationMessageFor(model => model.total_price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.vat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.vat, new { htmlAttributes = new { @class = "form-control", @id = "vat", onchange = "getTotal()" } })
                @Html.ValidationMessageFor(model => model.vat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.discount, new { htmlAttributes = new { @class = "form-control", @id = "discount", onchange = "getTotal()" } })
                @Html.ValidationMessageFor(model => model.discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.net_total_price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.net_total_price, new { htmlAttributes = new { @class = "form-control", @id = "NetTotal" } })
                @Html.ValidationMessageFor(model => model.net_total_price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.stock_status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.stock_status, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.stock_status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.memo_no, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.memo_no, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.memo_no, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.comments, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />
        <div class="box-footer">
            <div class="row">
                <div class="col-md-2">
                    <br />
                    <a class="form-group btn btn-danger btn-block fa fa-arrow-circle-left" href="/Sales/Index"><span> Back</span></a>
                </div>
                <div class="col-md-6">

                </div>
                <div class="col-lg-4 col-md-4">
                    <br />
                    <button class="form-group btn btn-primary btn-block" value="Create" type="submit" id="btnPRsave">
                        <i class="fa fa-plus"></i>
                        <span>Create Sales</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script>
    function changeProduct(ddlObject) {
        //Selected value of dropdownlist
        var selectedValue = ddlObject.value;
        //Selected text of dropdownlist
        //var selectedText = ddlObject.options[ddlObject.selectedIndex].innerHTML;
        getStockByProductId(selectedValue)
    }

    function getStockByProductId(id) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState == XMLHttpRequest.DONE) {
                var oStock = JSON.parse(xhr.responseText);
                document.getElementById('qty').value = oStock.qty;
                document.getElementById('salePrice').value = oStock.salePrice;
            }
        }
        xhr.open('GET', '/products/GetStockByProductId/' + id, true);
        xhr.send(null);
    }

    function isProductAvailable() {
        var isAvailable = true;
        var stockQty = parseInt(document.getElementById('qty').value);
        var saleQty = parseInt(document.getElementById('quantity').value);
        var salePrice = parseInt(document.getElementById('salePrice').value);
        if (isNaN(stockQty) || isNaN(saleQty) || isNaN(salePrice)) {
            isAvailable = false;
            alert("Select a product and input sale quantity.");
        } else if (saleQty > stockQty) {
            isAvailable = false;
            alert("Stock not available.");
        }
        return isAvailable;
    }

    function getTotal() {

        var price = document.getElementById("price").value;
        var qty = document.getElementById("qty").value;
        var total = price * qty;
        document.getElementById("total").value = total;
        var vat = document.getElementById("vat").value;
        var nVat = (vat / 100);
        var NetTotal = total * nVat;
        var discount = document.getElementById("discount").value;
        var NetTotal = (total + nVat) - discount;
        document.getElementById("NetTotal").value = NetTotal;
    }
</script>
